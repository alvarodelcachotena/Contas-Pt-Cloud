#!/usr/bin/env node

/**
 * Script para testar as APIs de IA
 */

import 'dotenv/config';
import { GoogleGenerativeAI } from '@google/generative-ai';
import OpenAI from 'openai';

async function testAPIs() {
    console.log('üß™ Testando APIs de IA...\n');

    // 1. Testar Google AI (Gemini)
    console.log('1. TESTANDO GOOGLE AI (GEMINI):');
    console.log('================================');

    const googleAIKey = process.env.GOOGLE_AI_API_KEY;
    if (!googleAIKey) {
        console.log('‚ùå GOOGLE_AI_API_KEY n√£o configurada');
    } else {
        console.log(`‚úÖ Chave configurada: ${googleAIKey.substring(0, 20)}...`);

        try {
            const genAI = new GoogleGenerativeAI(googleAIKey);
            const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });

            console.log('üîÑ Enviando teste para Google AI...');

            const result = await model.generateContent("Diga apenas 'Teste funcionando' em portugu√™s");
            const response = result.response.text();

            console.log('‚úÖ Google AI funcionando!');
            console.log(`   Resposta: ${response}`);

        } catch (error) {
            console.log('‚ùå Erro na Google AI:');
            console.log(`   C√≥digo: ${error.code || 'N/A'}`);
            console.log(`   Mensagem: ${error.message}`);

            if (error.message.includes('API key not valid')) {
                console.log('   üîß PROBLEMA: Chave da API inv√°lida');
                console.log('   SOLU√á√ÉO: Verifique se a chave est√° correta');
            } else if (error.message.includes('quota')) {
                console.log('   üîß PROBLEMA: Cota excedida');
                console.log('   SOLU√á√ÉO: Aguarde ou verifique o uso da API');
            }
        }
    }

    console.log('');

    // 2. Testar OpenAI
    console.log('2. TESTANDO OPENAI:');
    console.log('====================');

    const openAIKey = process.env.OPENAI_API_KEY;
    if (!openAIKey) {
        console.log('‚ùå OPENAI_API_KEY n√£o configurada');
    } else {
        console.log(`‚úÖ Chave configurada: ${openAIKey.substring(0, 20)}...`);

        try {
            const openai = new OpenAI({ apiKey: openAIKey });

            console.log('üîÑ Enviando teste para OpenAI...');

            const completion = await openai.chat.completions.create({
                model: "gpt-4o-mini",
                messages: [
                    { role: "user", content: "Diga apenas 'Teste funcionando' em portugu√™s" }
                ],
                max_tokens: 50,
                temperature: 0.7,
            });

            const response = completion.choices[0]?.message?.content;

            console.log('‚úÖ OpenAI funcionando!');
            console.log(`   Resposta: ${response}`);

        } catch (error) {
            console.log('‚ùå Erro na OpenAI:');
            console.log(`   C√≥digo: ${error.code || 'N/A'}`);
            console.log(`   Mensagem: ${error.message}`);

            if (error.message.includes('Incorrect API key')) {
                console.log('   üîß PROBLEMA: Chave da API incorreta');
                console.log('   SOLU√á√ÉO: Verifique se a chave est√° correta');
            } else if (error.message.includes('quota')) {
                console.log('   üîß PROBLEMA: Cota excedida');
                console.log('   SOLU√á√ÉO: Aguarde ou verifique o uso da API');
            }
        }
    }

    console.log('\nüìä RESUMO DOS TESTES:');
    console.log('=======================');

    // Verificar se as chaves est√£o no formato correto
    if (googleAIKey && !googleAIKey.includes('AIzaSy')) {
        console.log('‚ö†Ô∏è GOOGLE_AI_API_KEY pode estar em formato incorreto');
    }

    if (openAIKey && !openAIKey.includes('sk-')) {
        console.log('‚ö†Ô∏è OPENAI_API_KEY pode estar em formato incorreto');
    }

    console.log('\nüí° PR√ìXIMOS PASSOS:');
    console.log('=====================');
    console.log('1. Se ambas as APIs funcionaram, o problema est√° no chatbot');
    console.log('2. Se uma falhou, corrija a chave correspondente');
    console.log('3. Execute o chatbot novamente ap√≥s as corre√ß√µes');

    console.log('\nüöÄ Teste das APIs conclu√≠do!');
}

// Executar teste
testAPIs().catch(console.error);
