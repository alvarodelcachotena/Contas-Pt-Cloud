#!/usr/bin/env node

/**
 * Script para debuggar as vari√°veis de ambiente
 */

import 'dotenv/config';

function debugEnvironment() {
    console.log('üîç Debug das vari√°veis de ambiente...\n');

    // Verificar se dotenv est√° funcionando
    console.log('1. Status do dotenv:');
    console.log(`   NODE_ENV: ${process.env.NODE_ENV || 'n√£o definido'}`);
    console.log(`   PWD: ${process.env.PWD || 'n√£o definido'}`);
    console.log(`   CWD: ${process.cwd()}\n`);

    // Verificar vari√°veis cr√≠ticas
    console.log('2. Vari√°veis cr√≠ticas da base de dados:');

    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

    if (supabaseUrl) {
        console.log(`   ‚úÖ SUPABASE_URL: ${supabaseUrl.substring(0, 50)}...`);

        // Verificar formato da URL
        if (supabaseUrl.startsWith('postgresql://')) {
            console.log('   ‚úÖ Formato correto (postgresql://)');
        } else if (supabaseUrl.startsWith('https://')) {
            console.log('   ‚ö†Ô∏è Formato incorreto (https://) - deve ser postgresql://');
        } else {
            console.log('   ‚ùå Formato desconhecido');
        }
    } else {
        console.log('   ‚ùå SUPABASE_URL: n√£o configurada');
    }

    if (supabaseAnonKey) {
        console.log(`   ‚úÖ SUPABASE_ANON_KEY: ${supabaseAnonKey.substring(0, 10)}...${supabaseAnonKey.substring(supabaseAnonKey.length - 4)}`);
    } else {
        console.log('   ‚ùå SUPABASE_ANON_KEY: n√£o configurada');
    }

    if (supabaseServiceKey) {
        console.log(`   ‚úÖ SUPABASE_SERVICE_ROLE_KEY: ${supabaseServiceKey.substring(0, 10)}...${supabaseServiceKey.substring(supabaseServiceKey.length - 4)}`);
    } else {
        console.log('   ‚ùå SUPABASE_SERVICE_ROLE_KEY: n√£o configurada');
    }

    console.log('\n3. APIs de IA:');

    const googleAIKey = process.env.GOOGLE_AI_API_KEY;
    const openAIKey = process.env.OPENAI_API_KEY;

    if (googleAIKey && !googleAIKey.includes('sua_chave')) {
        console.log(`   ‚úÖ GOOGLE_AI_API_KEY: ${googleAIKey.substring(0, 10)}...${googleAIKey.substring(googleAIKey.length - 4)}`);
    } else {
        console.log('   ‚ùå GOOGLE_AI_API_KEY: n√£o configurada ou inv√°lida');
    }

    if (openAIKey && !openAIKey.includes('sua_chave')) {
        console.log(`   ‚úÖ OPENAI_API_KEY: ${openAIKey.substring(0, 10)}...${openAIKey.substring(openAIKey.length - 4)}`);
    } else {
        console.log('   ‚ùå OPENAI_API_KEY: n√£o configurada ou inv√°lida');
    }

    console.log('\n4. Teste de conex√£o direta:');

    if (supabaseUrl) {
        console.log('   üîÑ Tentando conex√£o direta...');

        // Simular teste de conex√£o
        if (supabaseUrl.includes('supabase.co')) {
            console.log('   ‚úÖ URL parece v√°lida (cont√©m supabase.co)');

            // Verificar se √© uma URL de conex√£o PostgreSQL
            if (supabaseUrl.includes('postgresql://')) {
                console.log('   ‚úÖ Formato de conex√£o PostgreSQL correto');
            } else {
                console.log('   ‚ùå PROBLEMA: URL n√£o √© formato PostgreSQL');
                console.log('   üîß SOLU√á√ÉO: Mude para formato postgresql://');
                console.log('   Exemplo correto: postgresql://postgres:[password]@db.[project].supabase.co:5432/postgres');
            }
        } else {
            console.log('   ‚ùå URL n√£o parece ser do Supabase');
        }
    }

    console.log('\nüìä RESUMO:');
    console.log('=====================');

    const hasSupabaseUrl = !!supabaseUrl;
    const hasSupabaseKeys = !!(supabaseAnonKey && supabaseServiceKey);
    const hasValidFormat = supabaseUrl && supabaseUrl.startsWith('postgresql://');

    if (hasSupabaseUrl && hasSupabaseKeys && hasValidFormat) {
        console.log('‚úÖ Configura√ß√£o da base de dados parece correta');
        console.log('‚úÖ Todas as vari√°veis necess√°rias est√£o configuradas');
        console.log('‚úÖ Formato da URL est√° correto');

        console.log('\nüí° PR√ìXIMOS PASSOS:');
        console.log('1. Verifique se o Supabase est√° online');
        console.log('2. Teste a conectividade de rede');
        console.log('3. Execute o script de teste da base de dados');

        console.log('\nüöÄ Ambiente configurado corretamente!');
    } else {
        console.log('‚ùå Configura√ß√£o incompleta ou incorreta');

        if (!hasSupabaseUrl) {
            console.log('   ‚ùå SUPABASE_URL n√£o configurada');
        }
        if (!hasSupabaseKeys) {
            console.log('   ‚ùå Chaves do Supabase n√£o configuradas');
        }
        if (!hasValidFormat) {
            console.log('   ‚ùå Formato da URL incorreto');
        }

        console.log('\nüîß PROBLEMAS IDENTIFICADOS:');
        if (!hasValidFormat && hasSupabaseUrl) {
            console.log('1. A SUPABASE_URL deve come√ßar com "postgresql://"');
            console.log('2. N√£o use "https://" para conex√£o de banco de dados');
            console.log('3. Obtenha a URL de conex√£o do painel do Supabase');
        }

        console.log('\nüö® A√á√ïES NECESS√ÅRIAS:');
        console.log('1. Verifique o arquivo .env');
        console.log('2. Corrija o formato da SUPABASE_URL');
        console.log('3. Configure todas as chaves necess√°rias');
        console.log('4. Execute este script novamente para verificar');
    }
}

// Executar debug
debugEnvironment();
