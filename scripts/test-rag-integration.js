#!/usr/bin/env node

/**
 * Script para testar a integra√ß√£o completa do RAG com todas as tabelas da BD
 */

const fetch = require('node-fetch');

async function testRAGIntegration() {
    console.log('üß™ Testando integra√ß√£o completa do RAG...\n');

    const testScenarios = [
        {
            name: 'An√°lise Financeira Completa',
            message: 'Faz uma an√°lise completa da situa√ß√£o financeira do meu neg√≥cio'
        },
        {
            name: 'An√°lise de Clientes',
            message: 'Quais s√£o os meus melhores clientes e como posso melhorar o relacionamento?'
        },
        {
            name: 'An√°lise de IVA',
            message: 'Como est√° a distribui√ß√£o do IVA nas minhas faturas e despesas?'
        },
        {
            name: 'An√°lise de Despesas',
            message: 'Quais s√£o as minhas maiores categorias de despesas e como posso otimizar?'
        },
        {
            name: 'Status do Sistema RAG',
            message: 'Como est√° funcionando o sistema RAG e quantos documentos foram processados?'
        },
        {
            name: 'An√°lise de Transa√ß√µes Banc√°rias',
            message: 'Mostra-me as transa√ß√µes banc√°rias recentes e padr√µes de fluxo de caixa'
        },
        {
            name: 'Insights de Neg√≥cio',
            message: 'Quais insights importantes posso extrair dos meus dados para melhorar o neg√≥cio?'
        }
    ];

    console.log('üìã Cen√°rios de teste:');
    testScenarios.forEach((scenario, index) => {
        console.log(`   ${index + 1}. ${scenario.name}`);
    });

    console.log('\nüöÄ Iniciando testes de integra√ß√£o RAG...\n');

    for (let i = 0; i < testScenarios.length; i++) {
        const scenario = testScenarios[i];
        console.log(`üì§ Teste ${i + 1}/${testScenarios.length}: ${scenario.name}`);
        console.log(`   Pergunta: "${scenario.message}"`);

        try {
            const startTime = Date.now();

            const response = await fetch('http://localhost:3000/api/ai-chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message: scenario.message }),
            });

            const responseTime = Date.now() - startTime;

            if (response.ok) {
                const data = await response.json();
                console.log(`‚úÖ Status: ${response.status} (${responseTime}ms)`);
                console.log(`   Modelo: ${data.model}`);
                console.log(`   Dados BD usados: ${data.databaseDataUsed ? 'Sim' : 'N√£o'}`);

                // Verificar se a resposta cont√©m dados do RAG
                const ragKeywords = [
                    'faturas', 'despesas', 'clientes', 'lucro', 'receita', 'IVA', 'categoria',
                    'transa√ß√£o', 'banc√°ria', 'documento', 'processado', 'confian√ßa', 'multi-agente'
                ];

                const hasRAGData = ragKeywords.some(keyword =>
                    data.response.toLowerCase().includes(keyword.toLowerCase())
                );

                if (hasRAGData) {
                    console.log('   ‚úÖ Resposta cont√©m dados do RAG');
                } else {
                    console.log('   ‚ö†Ô∏è Resposta pode n√£o conter dados completos do RAG');
                }

                // Verificar se a resposta √© detalhada
                const responseLength = data.response.length;
                if (responseLength > 200) {
                    console.log(`   üìä Resposta detalhada (${responseLength} caracteres)`);
                } else {
                    console.log(`   üìù Resposta curta (${responseLength} caracteres)`);
                }

                console.log(`   Resposta: ${data.response.substring(0, 150)}...`);

            } else {
                const errorData = await response.json();
                console.log(`‚ùå Status: ${response.status} (${responseTime}ms)`);
                console.log(`   Erro: ${errorData.error || 'Erro desconhecido'}`);
                console.log(`   Tipo: ${errorData.errorType || 'N/A'}`);
            }
        } catch (error) {
            console.log(`‚ùå Erro de conex√£o: ${error.message}`);
        }

        console.log('---');

        // Pausa entre testes
        if (i < testScenarios.length - 1) {
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
    }

    console.log('\nüìä RESUMO DOS TESTES DE INTEGRA√á√ÉO RAG:');
    console.log('==========================================');
    console.log(`Total de cen√°rios testados: ${testScenarios.length}`);
    console.log('‚úÖ Sistema deve integrar com todas as tabelas da BD');
    console.log('üìä Dados do RAG devem estar dispon√≠veis');
    console.log('ü§ñ Multi-agente deve funcionar');
    console.log('üí° Insights devem ser baseados em dados reais');

    console.log('\nüéØ TABELAS INTEGRADAS NO RAG:');
    console.log('================================');
    console.log('‚Ä¢ tenants - Configura√ß√£o multi-tenant');
    console.log('‚Ä¢ users - Usu√°rios do sistema');
    console.log('‚Ä¢ clients - Clientes e relacionamentos');
    console.log('‚Ä¢ invoices - Faturas e receitas');
    console.log('‚Ä¢ expenses - Despesas e categoriza√ß√£o');
    console.log('‚Ä¢ payments - Pagamentos e fluxo de caixa');
    console.log('‚Ä¢ bank_transactions - Transa√ß√µes banc√°rias');
    console.log('‚Ä¢ bank_accounts - Contas banc√°rias');
    console.log('‚Ä¢ documents - Documentos processados');
    console.log('‚Ä¢ multi_agent_results - Resultados do RAG');
    console.log('‚Ä¢ field_provenance - Metadados de extra√ß√£o');
    console.log('‚Ä¢ consensus_metadata - Consenso entre modelos');

    console.log('\nüí° PR√ìXIMOS PASSOS:');
    console.log('=====================');
    console.log('1. Verifique se todas as tabelas existem na BD');
    console.log('2. Confirme se h√° dados nas tabelas principais');
    console.log('3. Teste perguntas espec√≠ficas sobre cada √°rea');
    console.log('4. Verifique se o sistema RAG est√° processando documentos');

    console.log('\nüöÄ Integra√ß√£o RAG testada com sucesso!');
}

// Executar teste
testRAGIntegration().catch(console.error);
