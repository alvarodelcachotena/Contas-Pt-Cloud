import { GoogleGenAI } from "@google/genai";
import { ExtractionResult } from "../../shared/types";

export class AgentExtractorGemini {
  private genAI: GoogleGenAI;

  constructor(apiKey: string) {
    this.genAI = new GoogleGenAI({ apiKey });
  }

  private validateField(value: string | undefined, placeholderPatterns: string[]): string {
    if (!value || value.trim() === '') {
      return '';
    }
    
    const lowerValue = value.toLowerCase();
    for (const pattern of placeholderPatterns) {
      if (lowerValue.includes(pattern)) {
        console.log(`üö´ Rejected placeholder data: "${value}" contains "${pattern}"`);
        return '';
      }
    }
    
    return value;
  }

  async extract(
    ocrText: string,
    filename: string = "",
  ): Promise<ExtractionResult> {
    const prompt = `
REGRA ABSOLUTA: NUNCA use valores gen√©ricos, placeholders, ou dados inventados. Extraia APENAS dados reais vis√≠veis no documento ou deixe campos vazios.

Extrai os seguintes campos de uma fatura/documento fiscal:

1. Nome da empresa emissora (ISSUER)
2. NIF/VAT completo com prefixo do pa√≠s (PT123456789, IT12345678901, ES12345678A)
3. Pa√≠s do emissor (PT, IT, ES, DE, FR, etc.)
4. Endere√ßo completo do emissor (rua, cidade, c√≥digo postal, pa√≠s)
5. Telefone do emissor (com c√≥digo do pa√≠s se dispon√≠vel)
6. Data da fatura (formato YYYY-MM-DD)
7. Valor sem IVA
8. Valor do IVA
9. Valor total com IVA
10. Taxa de IVA (6%, 13%, ou 23%)
11. Cliente/Destinat√°rio
12. N√∫mero da fatura
13. Categoria (alimentacao|transporte|material_escritorio|servicos|combustivel|alojamento|outras_despesas)

REGRAS CR√çTICAS PARA NIF/VAT EU - OBRIGAT√ìRIO ADICIONAR PREFIXO DO PA√çS:
- Portugal: PT + 9 d√≠gitos (PT123456789)
- It√°lia: IT + 11 d√≠gitos (IT12345678901) - EXEMPLO: "03424760134" ‚Üí "IT03424760134"
- Espanha: ES + 8 d√≠gitos + 1 letra (ES12345678A)
- Fran√ßa: FR + 11 d√≠gitos (FR12345678901)
- Alemanha: DE + 9 d√≠gitos (DE123456789)
- Holanda: NL + 12 d√≠gitos (NL123456789B12)
- B√©lgica: BE + 10 d√≠gitos (BE1234567890)
- √Åustria: AT + 9 d√≠gitos (ATU12345678)
- Pol√≥nia: PL + 10 d√≠gitos (PL1234567890)
- Rep√∫blica Checa: CZ + 8-10 d√≠gitos (CZ12345678)
- Su√©cia: SE + 12 d√≠gitos (SE123456789012)
- Dinamarca: DK + 8 d√≠gitos (DK12345678)
- Finl√¢ndia: FI + 8 d√≠gitos (FI12345678)
- Irlanda: IE + 8 caracteres (IE1234567A)
- Luxemburgo: LU + 8 d√≠gitos (LU12345678)
- Gr√©cia: EL + 9 d√≠gitos (EL123456789)

DETEC√á√ÉO AUTOM√ÅTICA DE PA√çS (OBRIGAT√ìRIO):
- Sufixos de empresa: .IT ‚Üí It√°lia, .ES ‚Üí Espanha, .DE ‚Üí Alemanha, .FR ‚Üí Fran√ßa
- Tipos de empresa: S.R.L./S.P.A. ‚Üí IT, S.A. ‚Üí ES, GmbH ‚Üí DE, SARL ‚Üí FR, B.V. ‚Üí NL
- C√≥digos postais: 00000-99999 ‚Üí IT, 28000-48999 ‚Üí ES, 10000-99999 ‚Üí DE
- Idiomas: alem√£o ‚Üí DE, franc√™s ‚Üí FR, italiano ‚Üí IT, holand√™s ‚Üí NL
- NUNCA extrair NIF/VAT sem prefixo do pa√≠s

INSTRU√á√ïES CR√çTICAS PARA EXTRA√á√ÉO DE DADOS REAIS:
OBRIGAT√ìRIO: Extraia APENAS dados reais vis√≠veis no documento. NUNCA use placeholders, dados gen√©ricos, ou valores inventados.

1. Para nome do vendedor:
   - Procure no cabe√ßalho, logo, carimbos, ou assinatura do documento
   - Examine qualquer texto que indique "De:", "Emissor:", "Vendedor:", nome da empresa
   - Se estiver parcialmente vis√≠vel, extraia exatamente o que conseguir ler
   - Se absolutamente imposs√≠vel de determinar, deixe VAZIO e marque como problema de extra√ß√£o

2. Para valores monet√°rios:
   - Procure n√∫meros com s√≠mbolos ‚Ç¨, $ ou palavras "Total", "Subtotal", "IVA", "VAT", "L√≠quido"
   - Examine tabelas de valores, linhas de resumo, totais finais
   - Verifique c√°lculos (ex: L√≠quido + IVA = Total)
   - Se valores n√£o est√£o claramente vis√≠veis, deixe como 0 e reporte o problema

3. Para datas:
   - Procure formatos DD/MM/YYYY, DD-MM-YYYY, YYYY-MM-DD
   - Examine cabe√ßalhos, rodap√©s, campos de data espec√≠ficos
   - Procure por "Data:", "Date:", "Emitido em:", "Fatura de:", timestamps
   - NUNCA invente datas - se n√£o encontrar, deixe vazio e reporte o problema

4. Para NIF/VAT ID:
   - Procure n√∫meros longos (8-12 d√≠gitos) pr√≥ximos a "NIF", "VAT", "Tax ID", "CIF", "NIPT"
   - Examine blocos de informa√ß√µes da empresa, cabe√ßalhos, rodap√©s
   - Se encontrar n√∫mero sem prefixo do pa√≠s, detecte o pa√≠s pelo contexto da empresa
   - NUNCA invente NIFs - se n√£o encontrar, deixe vazio e reporte como problema

5. Para endere√ßos e telefones:
   - Extraia APENAS informa√ß√µes claramente vis√≠veis no documento
   - Se parcialmente leg√≠vel, extraia o que conseguir ler
   - Se n√£o conseguir ler, deixe vazio - N√ÉO invente informa√ß√µes

REGRAS DE CONFIAN√áA BASEADAS EM DADOS REAIS:
- Alta confian√ßa (0.8-1.0): Todos os dados principais claramente extra√≠dos do documento
- M√©dia confian√ßa (0.5-0.79): Maioria dos dados extra√≠dos, alguns campos em branco por n√£o serem leg√≠veis
- Baixa confian√ßa (0.1-0.49): Poucos dados extra√≠dos, documento de m√° qualidade ou ileg√≠vel

Texto OCR:
${ocrText.substring(0, 4000)}

Nome do ficheiro: ${filename}

Responde APENAS em formato JSON v√°lido:
{
  "vendor": "nome da empresa",
  "nif": "NIF/VAT completo com prefixo do pa√≠s",
  "nifCountry": "c√≥digo do pa√≠s (PT, IT, ES, etc.)",
  "vendorAddress": "endere√ßo completo do emissor",
  "vendorPhone": "telefone do emissor",
  "invoiceNumber": "n√∫mero da fatura",
  "issueDate": "YYYY-MM-DD",
  "total": valor_total_numerico,
  "netAmount": valor_sem_iva_numerico,
  "vatAmount": valor_iva_numerico,
  "vatRate": taxa_iva_decimal,
  "category": "categoria",
  "description": "descri√ß√£o breve",
  "confidence": valor_confianca,
  "extractionIssues": ["lista de problemas encontrados"]
}
`;

    try {
      const response = await this.genAI.models.generateContent({
        model: "gemini-2.5-flash",
        contents: [{ text: prompt }],
      });

      const textResponse = response.text || "";

      // Clean the response to extract JSON
      const jsonMatch = textResponse.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error("No JSON found in response");
      }

      const extracted = JSON.parse(jsonMatch[0]);
      
      console.log('ü§ñ Gemini Raw Response:', {
        vendor: extracted.vendor,
        nif: extracted.nif,
        nifCountry: extracted.nifCountry,
        vendorAddress: extracted.vendorAddress,
        vendorPhone: extracted.vendorPhone,
        total: extracted.total,
        netAmount: extracted.netAmount,
        vatAmount: extracted.vatAmount,
        vatRate: extracted.vatRate,
        issueDate: extracted.issueDate,
        invoiceNumber: extracted.invoiceNumber
      });

      // Post-process NIF to ensure country prefix is present
      let processedNif = extracted.nif || '';
      let processedNifCountry = extracted.nifCountry || '';
      
      // If NIF doesn't have country prefix, try to detect and add it
      if (processedNif && !processedNif.match(/^[A-Z]{2}/)) {
        const vendor = extracted.vendor || '';
        if (vendor.includes('S.R.L.') || vendor.includes('S.P.A.') || vendor.includes('.IT')) {
          processedNif = 'IT' + processedNif;
          processedNifCountry = 'IT';
        } else if (vendor.includes('S.A.') && !vendor.includes('S.A.R.L.')) {
          processedNif = 'ES' + processedNif;
          processedNifCountry = 'ES';
        } else if (vendor.includes('GmbH')) {
          processedNif = 'DE' + processedNif;
          processedNifCountry = 'DE';
        } else if (vendor.includes('SARL') || vendor.includes('S.A.R.L.')) {
          processedNif = 'FR' + processedNif;
          processedNifCountry = 'FR';
        } else if (vendor.includes('B.V.')) {
          processedNif = 'NL' + processedNif;
          processedNifCountry = 'NL';
        }
        console.log(`üîß Enhanced NIF from "${extracted.nif}" to "${processedNif}" (Country: ${processedNifCountry})`);
      }

      // Validate that no placeholder data is being returned - be more specific to avoid blocking legitimate names
      const placeholderPatterns = ['unknown vendor', 'not provided', 'n/a', 'generic company', 'placeholder', 'default company', 'desconhecido', 'n√£o fornecido', 'address not provided', 'phone not provided'];
      const cleanData = {
        vendor: this.validateField(extracted.vendor, placeholderPatterns),
        nif: processedNif,
        nifCountry: processedNifCountry,
        vendorAddress: this.validateField(extracted.vendorAddress, placeholderPatterns),
        vendorPhone: this.validateField(extracted.vendorPhone, placeholderPatterns),
        invoiceNumber: this.validateField(extracted.invoiceNumber, placeholderPatterns),
        issueDate: extracted.issueDate,
        total: parseFloat(extracted.total) || 0,
        netAmount: parseFloat(extracted.netAmount) || 0,
        vatAmount: parseFloat(extracted.vatAmount) || 0,
        vatRate: parseFloat(extracted.vatRate) || 0,
        category: extracted.category,
        description: this.validateField(extracted.description, placeholderPatterns),
      };

      return {
        data: cleanData,
        confidenceScore: extracted.confidence || 0.5,
        issues: extracted.extractionIssues || [],
        agentResults: {
          extractor: {
            model: "gemini-2.5-flash",
            method: "genai_api",
            rawResponse: textResponse.substring(0, 200),
          },
        },
        processedAt: new Date(),
      };
    } catch (error) {
      throw new Error(
        `Failed to process with Gemini: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  async extractFromPDF(
    fileBuffer: Buffer,
    filename: string,
  ): Promise<ExtractionResult> {
    const prompt = `
Analisa este documento financeiro (fatura/recibo) em PDF e extrai os seguintes campos:

REGRAS DE EXTRA√á√ÉO DE NIF/VAT ID EUROPEU - TODOS OS PA√çSES:
- Portugal: PT + 9 d√≠gitos (PT123456789)
- It√°lia: IT + 11 d√≠gitos (IT12345678901) - EXEMPLO: "03424760134" ‚Üí "IT03424760134"
- Espanha: ES + 8 d√≠gitos + 1 letra (ES12345678A)
- Fran√ßa: FR + 11 d√≠gitos (FR12345678901)
- Alemanha: DE + 9 d√≠gitos (DE123456789)
- Holanda: NL + 12 d√≠gitos (NL123456789B12)
- B√©lgica: BE + 10 d√≠gitos (BE1234567890)
- √Åustria: AT + 9 d√≠gitos (ATU12345678)
- Pol√≥nia: PL + 10 d√≠gitos (PL1234567890)
- Rep√∫blica Checa: CZ + 8-10 d√≠gitos (CZ12345678)
- Su√©cia: SE + 12 d√≠gitos (SE123456789012)
- Dinamarca: DK + 8 d√≠gitos (DK12345678)
- Finl√¢ndia: FI + 8 d√≠gitos (FI12345678)
- Irlanda: IE + 8 caracteres (IE1234567A)
- Luxemburgo: LU + 8 d√≠gitos (LU12345678)
- Gr√©cia: EL + 9 d√≠gitos (EL123456789)
- Hungria: HU + 8 d√≠gitos (HU12345678)
- Eslov√°quia: SK + 10 d√≠gitos (SK1234567890)
- Eslov√©nia: SI + 8 d√≠gitos (SI12345678)
- Bulg√°ria: BG + 9-10 d√≠gitos (BG123456789)
- Rom√©nia: RO + 2-10 d√≠gitos (RO12345678)
- Cro√°cia: HR + 11 d√≠gitos (HR12345678901)
- Chipre: CY + 9 caracteres (CY12345678A)
- Malta: MT + 8 d√≠gitos (MT12345678)
- Litu√¢nia: LT + 9-12 d√≠gitos (LT123456789)
- Let√≥nia: LV + 11 d√≠gitos (LV12345678901)
- Est√≥nia: EE + 9 d√≠gitos (EE123456789)
DETEC√á√ÉO AUTOM√ÅTICA DE PA√çS:
- Formas jur√≠dicas: S.R.L./S.P.A. ‚Üí IT, S.A. ‚Üí ES, GmbH ‚Üí DE, SARL ‚Üí FR, B.V. ‚Üí NL, AB/AG ‚Üí SE, ApS/A/S ‚Üí DK
- Dom√≠nios: .IT ‚Üí It√°lia, .ES ‚Üí Espanha, .DE ‚Üí Alemanha, .FR ‚Üí Fran√ßa, .NL ‚Üí Holanda
- C√≥digos postais e contexto do endere√ßo
- SEMPRE extrair com prefixo do pa√≠s correto

CAMPOS OBRIGAT√ìRIOS:
1. Nome da empresa emissora
2. NIF/VAT ID com prefixo do pa√≠s
3. Data da fatura (formato YYYY-MM-DD)
4. Valor sem IVA/VAT
5. Valor do IVA/VAT
6. Valor total com IVA/VAT
7. Taxa de IVA/VAT (como decimal: 0.23 para 23%)
8. N√∫mero da fatura
9. Categoria de despesa
10. Descri√ß√£o dos produtos/servi√ßos

Responde APENAS em formato JSON v√°lido SEM markdown ou c√≥digo:
{
  "vendor": "nome da empresa",
  "nif": "NIF com prefixo do pa√≠s (ex: IT03424760134)", 
  "invoiceNumber": "n√∫mero da fatura",
  "issueDate": "YYYY-MM-DD",
  "total": 0.00,
  "netAmount": 0.00,
  "vatAmount": 0.00,
  "vatRate": 0.23,
  "category": "outras_despesas",
  "description": "descri√ß√£o breve"
}
`;

    try {
      const base64Data = fileBuffer.toString("base64");

      const contents = [
        { text: prompt },
        {
          inlineData: {
            mimeType: "application/pdf",
            data: base64Data,
          },
        },
      ];

      const response = await this.genAI.models.generateContent({
        model: "gemini-2.5-flash",
        contents: contents
      });

      const textResponse = response.text || "";

      // Enhanced JSON extraction to handle various response formats
      let jsonText = textResponse.trim();
      
      // Remove markdown code blocks if present
      jsonText = jsonText.replace(/```json\s*/gi, '').replace(/```\s*$/gi, '');
      jsonText = jsonText.replace(/^```\s*/gi, '').replace(/```\s*$/gi, '');
      
      // Find JSON object boundaries
      const firstBrace = jsonText.indexOf('{');
      const lastBrace = jsonText.lastIndexOf('}');
      
      if (firstBrace === -1 || lastBrace === -1 || firstBrace >= lastBrace) {
        // Check if Gemini doesn't support PDF processing
        if (textResponse.includes('lack the capability') || textResponse.includes('cannot process') || textResponse.includes('unable to process')) {
          throw new Error('Gemini does not support PDF processing');
        }
        
        throw new Error("No JSON found in response");
      }

      const jsonStr = jsonText.substring(firstBrace, lastBrace + 1);
      
      let extracted;
      try {
        extracted = JSON.parse(jsonStr);
      } catch (parseError) {
        // Try to fix common JSON issues
        let fixedJson = jsonStr
          .replace(/([{,]\s*)(\w+)(\s*:)/g, '$1"$2"$3') // Add quotes to unquoted keys
          .replace(/,\s*}/g, '}') // Remove trailing commas
          .replace(/,\s*]/g, ']'); // Remove trailing commas in arrays
        
        try {
          extracted = JSON.parse(fixedJson);
        } catch (secondError) {
          console.log('JSON parse error:', parseError);
          console.log('Attempted to parse:', jsonStr.substring(0, 200));
          throw new Error("Invalid JSON in response");
        }
      }

      // Enhanced NIF processing for all EU countries
      let processedNif = extracted.nif || '';
      let nifCountry = '';
      
      // Post-process NIF to ensure country prefix is present
      if (processedNif && !processedNif.match(/^[A-Z]{2}/)) {
        const vendor = extracted.vendor || '';
        
        // Auto-detect country based on business patterns
        if (vendor.includes('S.R.L.') || vendor.includes('S.P.A.') || vendor.includes('.IT')) {
          processedNif = 'IT' + processedNif;
          nifCountry = 'IT';
        } else if (vendor.includes('S.A.') && !vendor.includes('S.A.R.L.')) {
          processedNif = 'ES' + processedNif;
          nifCountry = 'ES';
        } else if (vendor.includes('GmbH') || vendor.includes('.DE')) {
          processedNif = 'DE' + processedNif;
          nifCountry = 'DE';
        } else if (vendor.includes('SARL') || vendor.includes('S.A.R.L.') || vendor.includes('.FR')) {
          processedNif = 'FR' + processedNif;
          nifCountry = 'FR';
        } else if (vendor.includes('B.V.') || vendor.includes('.NL')) {
          processedNif = 'NL' + processedNif;
          nifCountry = 'NL';
        } else if (vendor.includes('AB') || vendor.includes('AG') || vendor.includes('.SE')) {
          processedNif = 'SE' + processedNif;
          nifCountry = 'SE';
        } else if (vendor.includes('ApS') || vendor.includes('A/S') || vendor.includes('.DK')) {
          processedNif = 'DK' + processedNif;
          nifCountry = 'DK';
        } else if (vendor.includes('Oy') || vendor.includes('.FI')) {
          processedNif = 'FI' + processedNif;
          nifCountry = 'FI';
        } else if (vendor.includes('Sp.') || vendor.includes('.PL')) {
          processedNif = 'PL' + processedNif;
          nifCountry = 'PL';
        } else if (vendor.includes('s.r.o.') || vendor.includes('.CZ')) {
          processedNif = 'CZ' + processedNif;
          nifCountry = 'CZ';
        } else if (vendor.includes('.AT')) {
          processedNif = 'AT' + processedNif;
          nifCountry = 'AT';
        } else if (vendor.includes('.BE')) {
          processedNif = 'BE' + processedNif;
          nifCountry = 'BE';
        }
        
        console.log(`üîß Enhanced NIF processing: "${extracted.nif}" ‚Üí "${processedNif}" (${nifCountry})`);
      } else if (processedNif.match(/^[A-Z]{2}/)) {
        nifCountry = processedNif.substring(0, 2);
      }

      // Validate that no placeholder data is being returned - be more specific to avoid blocking legitimate names
      const placeholderPatterns = ['unknown vendor', 'not provided', 'n/a', 'generic company', 'placeholder', 'default company', 'desconhecido', 'n√£o fornecido', 'address not provided', 'phone not provided'];
      const cleanData = {
        vendor: this.validateField(extracted.vendor, placeholderPatterns),
        nif: processedNif,
        nifCountry: nifCountry,
        vendorAddress: '',
        vendorPhone: '',
        invoiceNumber: this.validateField(extracted.invoiceNumber, placeholderPatterns),
        issueDate: extracted.issueDate || '',
        total: parseFloat(extracted.total) || 0,
        netAmount: parseFloat(extracted.netAmount) || 0,
        vatAmount: parseFloat(extracted.vatAmount) || 0,
        vatRate: parseFloat(extracted.vatRate) || 0,
        category: extracted.category || "outras_despesas",
        description: this.validateField(extracted.description, placeholderPatterns),
      };

      return {
        data: cleanData,
        confidenceScore: extracted.confidence || 0.1,
        issues: extracted.extractionIssues || [],
        agentResults: {
          extractor: {
            model: "gemini-2.5-flash",
            method: "genai_pdf_vision",
            rawResponse: textResponse.substring(0, 200),
          },
        },
        processedAt: new Date(),
      };
    } catch (error) {
      throw new Error(
        `Failed to process PDF with Gemini: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  async extractFromImage(
    fileBuffer: Buffer,
    mimeType: string,
    filename: string,
  ): Promise<ExtractionResult> {
    const prompt = `
Analisa esta imagem de documento financeiro (fatura/recibo) e extrai os seguintes campos:

REGRAS DE EXTRA√á√ÉO DE NIF/VAT ID EUROPEU:
- Portugal: PT + 9 d√≠gitos (PT123456789)
- It√°lia: IT + 11 d√≠gitos (IT12345678901) 
- Espanha: ES + 8 d√≠gitos + 1 letra (ES12345678A)
- Fran√ßa: FR + 11 d√≠gitos (FR12345678901)
- Alemanha: DE + 9 d√≠gitos (DE123456789)
- Outros pa√≠ses europeus: c√≥digo pa√≠s + n√∫mero VAT

CAMPOS OBRIGAT√ìRIOS:
1. Nome da empresa emissora
2. NIF/VAT ID com prefixo do pa√≠s
3. Data da fatura (formato YYYY-MM-DD)
4. Valor sem IVA/VAT
5. Valor do IVA/VAT
6. Valor total com IVA/VAT
7. Taxa de IVA/VAT (como decimal: 0.23 para 23%)
8. N√∫mero da fatura
9. Categoria de despesa
10. Descri√ß√£o dos produtos/servi√ßos

Responde APENAS em formato JSON v√°lido SEM markdown ou c√≥digo:
{
  "vendor": "nome da empresa",
  "nif": "NIF com prefixo do pa√≠s (ex: IT03424760134)", 
  "invoiceNumber": "n√∫mero da fatura",
  "issueDate": "YYYY-MM-DD",
  "total": 0.00,
  "netAmount": 0.00,
  "vatAmount": 0.00,
  "vatRate": 0.23,
  "category": "outras_despesas",
  "description": "descri√ß√£o breve"
}
`;

    try {
      const base64Data = fileBuffer.toString("base64");

      const contents = [
        { text: prompt },
        {
          inlineData: {
            mimeType: mimeType,
            data: base64Data,
          },
        },
      ];

      const response = await this.genAI.models.generateContent({
        model: "gemini-2.5-flash",
        contents: contents
      });

      const textResponse = response.text || "";

      // Enhanced JSON extraction to handle various response formats
      let jsonText = textResponse.trim();
      
      // Remove markdown code blocks if present
      jsonText = jsonText.replace(/```json\s*/gi, '').replace(/```\s*$/gi, '');
      jsonText = jsonText.replace(/^```\s*/gi, '').replace(/```\s*$/gi, '');
      
      // Find JSON object boundaries
      const firstBrace = jsonText.indexOf('{');
      const lastBrace = jsonText.lastIndexOf('}');
      
      if (firstBrace === -1 || lastBrace === -1 || firstBrace >= lastBrace) {
        throw new Error("No JSON found in response");
      }

      const jsonStr = jsonText.substring(firstBrace, lastBrace + 1);
      
      let extracted;
      try {
        extracted = JSON.parse(jsonStr);
      } catch (parseError) {
        // Try to fix common JSON issues
        let fixedJson = jsonStr
          .replace(/([{,]\s*)(\w+)(\s*:)/g, '$1"$2"$3') // Add quotes to unquoted keys
          .replace(/,\s*}/g, '}') // Remove trailing commas
          .replace(/,\s*]/g, ']'); // Remove trailing commas in arrays
        
        try {
          extracted = JSON.parse(fixedJson);
        } catch (secondError) {
          console.log('JSON parse error:', parseError);
          console.log('Attempted to parse:', jsonStr.substring(0, 200));
          throw new Error("Invalid JSON in response");
        }
      }

      // Validate that no placeholder data is being returned
      const placeholderPatterns = ['unknown vendor', 'not provided', 'n/a', 'generic company', 'placeholder', 'default company', 'desconhecido', 'n√£o fornecido'];
      const cleanData = {
        vendor: this.validateField(extracted.vendor, placeholderPatterns),
        nif: extracted.nif || '',
        nifCountry: extracted.nif ? extracted.nif.substring(0, 2) : '',
        vendorAddress: '',
        vendorPhone: '',
        invoiceNumber: this.validateField(extracted.invoiceNumber, placeholderPatterns),
        issueDate: extracted.issueDate || '',
        total: parseFloat(extracted.total) || 0,
        netAmount: parseFloat(extracted.netAmount) || 0,
        vatAmount: parseFloat(extracted.vatAmount) || 0,
        vatRate: parseFloat(extracted.vatRate) || 0,
        category: extracted.category || "outras_despesas",
        description: this.validateField(extracted.description, placeholderPatterns),
      };

      return {
        data: cleanData,
        confidenceScore: extracted.confidence || 0.7,
        issues: extracted.extractionIssues || [],
        agentResults: {
          extractor: {
            model: "gemini-2.5-flash",
            method: "genai_image_vision",
            rawResponse: textResponse.substring(0, 200),
          },
        },
        processedAt: new Date(),
      };
    } catch (error) {
      throw new Error(
        `Failed to process image with Gemini: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }
}
