import { GoogleGenAI } from "@google/genai";
import { ExtractionResult, LineItem } from "../../shared/types";
import { TableParser } from "./TableParser";
import { ConsensusEngine } from "./ConsensusEngine";

export class AgentExtractorGemini {
  private genAI: GoogleGenAI;
  private tableParser: TableParser;
  private consensusEngine: ConsensusEngine;

  constructor(apiKey: string) {
    this.genAI = new GoogleGenAI({ apiKey });
    this.tableParser = new TableParser(apiKey);
    this.consensusEngine = new ConsensusEngine();
  }

  private validateField(value: string | undefined, placeholderPatterns: string[]): string {
    if (!value || value.trim() === '') {
      return '';
    }

    const lowerValue = value.toLowerCase();
    for (const pattern of placeholderPatterns) {
      if (lowerValue.includes(pattern)) {
        console.log(`üö´ Rejected placeholder data: "${value}" contains "${pattern}"`);
        return '';
      }
    }

    return value;
  }

  async extract(
    ocrText: string,
    filename: string = "",
  ): Promise<ExtractionResult> {
    const prompt = `
REGRA ABSOLUTA: NUNCA use valores gen√©ricos, placeholders, ou dados inventados. Extraia APENAS dados reais vis√≠veis no documento ou deixe campos vazios.

Extrai os seguintes campos de uma fatura/documento fiscal:

1. Nome da empresa emissora (ISSUER)
2. NIF/VAT completo com prefixo do pa√≠s (PT123456789, IT12345678901, ES12345678A)
3. Pa√≠s do emissor (PT, IT, ES, DE, FR, etc.)
4. Endere√ßo completo do emissor (rua, cidade, c√≥digo postal, pa√≠s)
5. Telefone do emissor (com c√≥digo do pa√≠s se dispon√≠vel)
6. Data da fatura (formato YYYY-MM-DD)
7. Valor sem IVA
8. Valor do IVA
9. Valor total com IVA
10. Taxa de IVA (6, 13, ou 23 como porcentaje) - IMPORTANTE: 10% = 10, 23% = 23
11. Cliente/Destinat√°rio
12. N√∫mero da fatura
13. Categoria (alimentacao|transporte|material_escritorio|servicos|combustivel|alojamento|outras_despesas)
14. Tipo de pago: SIEMPRE "tarjeta" (no importa qu√© m√©todo aparezca en el documento)

REGRAS CR√çTICAS PARA NIF/VAT EU - OBRIGAT√ìRIO ADICIONAR PREFIXO DO PA√çS:
- Portugal: PT + 9 d√≠gitos (PT123456789)
- It√°lia: IT + 11 d√≠gitos (IT12345678901) - EXEMPLO: "03424760134" ‚Üí "IT03424760134"
- Espanha: N√ÉO adicionar prefixo ES automaticamente, manter formato original
- Fran√ßa: FR + 11 d√≠gitos (FR12345678901)
- Alemanha: DE + 9 d√≠gitos (DE123456789)
- Holanda: NL + 12 d√≠gitos (NL123456789B12)
- B√©lgica: BE + 10 d√≠gitos (BE1234567890)
- √Åustria: AT + 9 d√≠gitos (ATU12345678)
- Pol√≥nia: PL + 10 d√≠gitos (PL1234567890)
- Rep√∫blica Checa: CZ + 8-10 d√≠gitos (CZ12345678)
- Su√©cia: SE + 12 d√≠gitos (SE123456789012)
- Dinamarca: DK + 8 d√≠gitos (DK12345678)
- Finl√¢ndia: FI + 8 d√≠gitos (FI12345678)
- Irlanda: IE + 8 caracteres (IE1234567A)
- Luxemburgo: LU + 8 d√≠gitos (LU12345678)
- Gr√©cia: EL + 9 d√≠gitos (EL123456789)

DETEC√á√ÉO AUTOM√ÅTICA DE PA√çS (OBRIGAT√ìRIO):
- Sufixos de empresa: .IT ‚Üí It√°lia, .DE ‚Üí Alemanha, .FR ‚Üí Fran√ßa
- Tipos de empresa: S.R.L./S.P.A. ‚Üí IT, GmbH ‚Üí DE, SARL ‚Üí FR, B.V. ‚Üí NL
- C√≥digos postais: 00000-99999 ‚Üí IT, 10000-99999 ‚Üí DE
- Idiomas: alem√£o ‚Üí DE, franc√™s ‚Üí FR, italiano ‚Üí IT, holand√™s ‚Üí NL
- Para empresas espanholas: N√ÉO adicionar prefixo ES automaticamente, manter formato original

INSTRU√á√ïES CR√çTICAS PARA EXTRA√á√ÉO DE DADOS REAIS:
OBRIGAT√ìRIO: Extraia APENAS dados reais vis√≠veis no documento. NUNCA use placeholders, dados gen√©ricos, ou valores inventados.

1. Para nome do vendedor:
   - Procure no cabe√ßalho, logo, carimbos, ou assinatura do documento
   - Examine qualquer texto que indique "De:", "Emissor:", "Vendedor:", nome da empresa
   - Se estiver parcialmente vis√≠vel, extraia exatamente o que conseguir ler
   - Se absolutamente imposs√≠vel de determinar, deixe VAZIO e marque como problema de extra√ß√£o

2. Para valores monet√°rios:
   - Procure n√∫meros com s√≠mbolos ‚Ç¨, $ ou palavras "Total", "Subtotal", "IVA", "VAT", "L√≠quido"
   - Examine tabelas de valores, linhas de resumo, totais finais
   - Verifique c√°lculos (ex: L√≠quido + IVA = Total)
   - Se valores n√£o est√£o claramente vis√≠veis, deixe como 0 e reporte o problema

3. Para datas:
   - Procure formatos DD/MM/YYYY, DD-MM-YYYY, YYYY-MM-DD
   - Examine cabe√ßalhos, rodap√©s, campos de data espec√≠ficos
   - Procure por "Data:", "Date:", "Emitido em:", "Fatura de:", timestamps
   - NUNCA invente datas - se n√£o encontrar, deixe vazio e reporte o problema

4. Para NIF/VAT ID:
   - Procure n√∫meros longos (8-12 d√≠gitos) pr√≥ximos a "NIF", "VAT", "Tax ID", "CIF", "NIPT"
   - Examine blocos de informa√ß√µes da empresa, cabe√ßalhos, rodap√©s
   - Se encontrar n√∫mero sem prefixo do pa√≠s, detecte o pa√≠s pelo contexto da empresa
   - NUNCA invente NIFs - se n√£o encontrar, deixe vazio e reporte como problema

5. Para endere√ßos e telefones:
   - Extraia APENAS informa√ß√µes claramente vis√≠veis no documento
   - Se parcialmente leg√≠vel, extraia o que conseguir ler
   - Se n√£o conseguir ler, deixe vazio - N√ÉO invente informa√ß√µes

REGRAS DE CONFIAN√áA BASEADAS EM DADOS REAIS:
- Alta confian√ßa (0.8-1.0): Todos os dados principais claramente extra√≠dos do documento
- M√©dia confian√ßa (0.5-0.79): Maioria dos dados extra√≠dos, alguns campos em branco por n√£o serem leg√≠veis
- Baixa confian√ßa (0.1-0.49): Poucos dados extra√≠dos, documento de m√° qualidade ou ileg√≠vel

Texto OCR:
${ocrText.substring(0, 4000)}

Nome do ficheiro: ${filename}

Responde APENAS em formato JSON v√°lido:
{
  "vendor": "nome da empresa",
  "nif": "NIF/VAT completo com prefixo do pa√≠s",
  "nifCountry": "c√≥digo do pa√≠s (PT, IT, ES, etc.)",
  "vendorAddress": "endere√ßo completo do emissor",
  "vendorPhone": "telefone do emissor",
  "invoiceNumber": "n√∫mero da fatura",
  "issueDate": "YYYY-MM-DD",
  "total": valor_total_numerico,
  "netAmount": valor_sem_iva_numerico,
  "vatAmount": valor_iva_numerico,
  "vatRate": taxa_iva_como_porcentaje (ejemplo: 10% = 10, 23% = 23),
  "category": "categoria",
  "description": "descri√ß√£o breve",
  "paymentType": "tarjeta",
  "confidence": valor_confianca,
  "extractionIssues": ["lista de problemas encontrados"]
}
`;

    try {
      const response = await this.genAI.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: [{ text: prompt }]
      });
      const textResponse = response.text || "";

      // Clean the response to extract JSON
      const jsonMatch = textResponse.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error("No JSON found in response");
      }

      const extracted = JSON.parse(jsonMatch[0]);

      console.log('ü§ñ Gemini Raw Response:', {
        vendor: extracted.vendor,
        nif: extracted.nif,
        nifCountry: extracted.nifCountry,
        vendorAddress: extracted.vendorAddress,
        vendorPhone: extracted.vendorPhone,
        total: extracted.total,
        netAmount: extracted.netAmount,
        vatAmount: extracted.vatAmount,
        vatRate: extracted.vatRate,
        issueDate: extracted.issueDate,
        invoiceNumber: extracted.invoiceNumber
      });

      // Post-process NIF to ensure country prefix is present
      let processedNif = extracted.nif || '';
      let processedNifCountry = extracted.nifCountry || '';

      // Keep NIF exactly as extracted by AI without any automatic prefix addition
      // This prevents unwanted prefixes like "ES" being added to Spanish NIFs
      console.log(`üîß NIF kept as extracted: "${extracted.nif}" ‚Üí "${processedNif}"`);

      // Only set country if NIF already has a prefix
      if (processedNif.match(/^[A-Z]{2}/)) {
        processedNifCountry = processedNif.substring(0, 2);
      }

      // Validate that no placeholder data is being returned - be more specific to avoid blocking legitimate names
      const placeholderPatterns = ['unknown vendor', 'not provided', 'n/a', 'generic company', 'placeholder', 'default company', 'desconhecido', 'n√£o fornecido', 'address not provided', 'phone not provided'];
      const cleanData = {
        vendor: this.validateField(extracted.vendor, placeholderPatterns),
        nif: processedNif,
        nifCountry: processedNifCountry,
        vendorAddress: this.validateField(extracted.vendorAddress, placeholderPatterns),
        vendorPhone: this.validateField(extracted.vendorPhone, placeholderPatterns),
        invoiceNumber: this.validateField(extracted.invoiceNumber, placeholderPatterns),
        issueDate: extracted.issueDate,
        total: parseFloat(extracted.total) || 0,
        netAmount: parseFloat(extracted.netAmount) || 0,
        vatAmount: parseFloat(extracted.vatAmount) || 0,
        vatRate: (parseFloat(extracted.vatRate) || 0) / 100, // Convertir porcentaje a decimal
        category: extracted.category,
        description: this.validateField(extracted.description, placeholderPatterns),
        paymentType: 'tarjeta', // Siempre tarjeta
      };

      // Track field-level provenance with detailed metadata
      const provenance: { [field: string]: any } = {};
      const timestamp = new Date();

      for (const [field, value] of Object.entries(cleanData)) {
        provenance[field] = {
          model: "gemini-1.5-pro",
          confidence: value ? 0.85 : 0.3,
          method: "genai_api",
          timestamp: timestamp,
          rawValue: String(value || ''),
          processingTime: 0, // Will be calculated by the calling function
          modelVersion: "2.5-flash",
          extractionContext: {
            pageNumber: 1,
            ocrConfidence: 0.9,
            boundingBox: null // Not available for text extraction
          }
        };
      }

      return {
        data: {
          ...cleanData,
          lineItems: [], // Will be populated by table parser
        },
        confidenceScore: extracted.confidence || 0.5,
        issues: extracted.extractionIssues || [],
        agentResults: {
          extractor: {
            model: "gemini-2.5-flash",
            method: "genai_api",
            rawResponse: textResponse.substring(0, 200),
            provenance: provenance,
          },
        },
        processedAt: new Date(),
      };
    } catch (error) {
      throw new Error(
        `Failed to process with Gemini: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  async extractFromPDF(
    fileBuffer: Buffer,
    filename: string,
  ): Promise<ExtractionResult> {
    try {
      // First extract tables and line items
      const tableResult = await this.tableParser.extractTables(fileBuffer, "application/pdf", filename);

      // Then extract header/metadata information
      const baseResult = await this.genAI.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: [
          {
            inlineData: {
              mimeType: "application/pdf",
              data: fileBuffer.toString("base64"),
            },
          },
          { text: this.buildPDFExtractionPrompt() }
        ],
      });

      const textResponse = baseResult.text || "";
      const jsonMatch = textResponse.match(/\{[\s\S]*\}/);

      if (!jsonMatch) {
        throw new Error("No JSON found in response");
      }

      const extracted = JSON.parse(jsonMatch[0]);

      // Process NIF and clean data as before
      let processedNif = extracted.nif || '';
      let nifCountry = '';

      if (processedNif && !processedNif.match(/^[A-Z]{2}/)) {
        const vendor = extracted.vendor || '';

        // Auto-detect country based on business patterns
        if (vendor.includes('S.R.L.') || vendor.includes('S.P.A.') || vendor.includes('.IT')) {
          processedNif = 'IT' + processedNif;
          nifCountry = 'IT';
          // For Spanish companies, don't automatically add ES prefix
          // Let the AI extract the correct format
        }
        // Keep NIF exactly as extracted by AI without any automatic prefix addition
        // This prevents unwanted prefixes like "ES" being added to Spanish NIFs
        console.log(`üîß NIF kept as extracted: "${extracted.nif}" ‚Üí "${processedNif}"`);
      } else if (processedNif.match(/^[A-Z]{2}/)) {
        nifCountry = processedNif.substring(0, 2);
      }

      // Validate and clean the data
      const placeholderPatterns = ['unknown vendor', 'not provided', 'n/a', 'generic company', 'placeholder', 'default company', 'desconhecido', 'n√£o fornecido'];
      const cleanData = {
        vendor: this.validateField(extracted.vendor, placeholderPatterns),
        nif: processedNif,
        nifCountry: nifCountry,
        vendorAddress: '',
        vendorPhone: '',
        invoiceNumber: this.validateField(extracted.invoiceNumber, placeholderPatterns),
        issueDate: extracted.issueDate || '',
        total: parseFloat(extracted.total) || 0,
        netAmount: parseFloat(extracted.netAmount) || 0,
        vatAmount: parseFloat(extracted.vatAmount) || 0,
        vatRate: (parseFloat(extracted.vatRate) || 0) / 100, // Convertir porcentaje a decimal
        category: extracted.category || "outras_despesas",
        description: this.validateField(extracted.description, placeholderPatterns),
        paymentType: 'tarjeta', // Siempre tarjeta
        lineItems: tableResult.lineItems || [],
      };

      // Create separate extractions for consensus processing
      const baseExtraction: ExtractionResult = {
        data: { ...cleanData, lineItems: [] },
        confidenceScore: extracted.confidence || 0.5,
        issues: extracted.extractionIssues || [],
        agentResults: {
          extractor: {
            model: "gemini-2.5-flash",
            method: "genai_pdf_vision",
            rawResponse: textResponse.substring(0, 200),
            provenance: this.buildProvenance(cleanData, "genai_pdf_vision", 0.85),
          },
        },
        processedAt: new Date(),
      };

      const tableExtraction: ExtractionResult = {
        data: { ...cleanData, lineItems: tableResult.lineItems },
        confidenceScore: tableResult.tableConfidence,
        issues: tableResult.extractionIssues,
        agentResults: {
          extractor: {
            model: "gemini-2.5-flash",
            method: "genai_table_vision",
            rawResponse: "Table extraction result",
            provenance: this.buildProvenance(cleanData, "genai_table_vision", tableResult.tableConfidence),
          },
        },
        processedAt: new Date(),
      };

      // Use consensus engine to merge results
      return this.consensusEngine.processResults([baseExtraction, tableExtraction]);

    } catch (error: unknown) {
      throw new Error(
        `Failed to process PDF with Gemini: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  private buildPDFExtractionPrompt(): string {
    return `
Analyze this document and extract key invoice information.

CRITICAL RULES:
1. Extract ONLY data clearly visible in the document
2. Never use placeholder or generic data
3. Leave fields empty if not found
4. Be precise with numbers and amounts

REQUIRED FIELDS:
1. Vendor name
2. Tax ID/NIF (with country prefix)
3. Invoice date (YYYY-MM-DD)
4. Net amount (without VAT)
5. VAT amount
6. Total amount (with VAT)
7. VAT rate (as decimal)
8. Invoice number
9. Category
10. Description

Return ONLY valid JSON:
{
  "vendor": "company name",
  "nif": "tax ID with country prefix",
  "invoiceNumber": "number if visible",
  "issueDate": "YYYY-MM-DD",
  "total": 0.00,
  "netAmount": 0.00,
  "vatAmount": 0.00,
  "vatRate": 0.23,
  "category": "category",
  "description": "brief description",
  "confidence": 0.9,
  "extractionIssues": []
}`;
  }

  async extractFromImage(
    fileBuffer: Buffer,
    mimeType: string,
    filename: string,
  ): Promise<ExtractionResult> {
    try {
      // First extract tables and line items
      const tableResult = await this.tableParser.extractTables(fileBuffer, mimeType, filename);

      // Then extract header/metadata information using existing image prompt
      const baseResult = await this.genAI.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: [
          { text: this.buildImageExtractionPrompt() },
          {
            inlineData: {
              mimeType: mimeType,
              data: fileBuffer.toString("base64"),
            },
          },
        ],
      });

      const textResponse = baseResult.text || "";
      const jsonMatch = textResponse.match(/\{[\s\S]*\}/);

      if (!jsonMatch) {
        throw new Error("No JSON found in response");
      }

      const extracted = JSON.parse(jsonMatch[0]);

      // Validate and clean the data
      const placeholderPatterns = ['unknown vendor', 'not provided', 'n/a', 'generic company', 'placeholder', 'default company', 'desconhecido', 'n√£o fornecido'];
      const cleanData = {
        vendor: this.validateField(extracted.vendor, placeholderPatterns),
        nif: extracted.nif || '',
        nifCountry: extracted.nif ? extracted.nif.substring(0, 2) : '',
        vendorAddress: '',
        vendorPhone: '',
        invoiceNumber: this.validateField(extracted.invoiceNumber, placeholderPatterns),
        issueDate: extracted.issueDate || '',
        total: parseFloat(extracted.total) || 0,
        netAmount: parseFloat(extracted.netAmount) || 0,
        vatAmount: parseFloat(extracted.vatAmount) || 0,
        vatRate: (parseFloat(extracted.vatRate) || 0) / 100, // Convertir porcentaje a decimal
        category: extracted.category || "outras_despesas",
        description: this.validateField(extracted.description, placeholderPatterns),
        paymentType: 'tarjeta', // Siempre tarjeta
        lineItems: tableResult.lineItems || [],
      };

      // Track field-level provenance
      const provenance: { [field: string]: any } = {};
      for (const [field, value] of Object.entries(cleanData)) {
        if (field === 'lineItems') {
          provenance[field] = {
            model: "gemini-2.5-flash",
            confidence: tableResult.tableConfidence,
            method: "genai_table_vision"
          };
        } else {
          provenance[field] = {
            model: "gemini-2.5-flash",
            confidence: value ? 0.8 : 0.3,
            method: "genai_image_vision"
          };
        }
      }

      return {
        data: cleanData,
        confidenceScore: Math.min(extracted.confidence || 0.7, tableResult.tableConfidence),
        issues: [...(extracted.extractionIssues || []), ...tableResult.extractionIssues],
        agentResults: {
          extractor: {
            model: "gemini-2.5-flash",
            method: "genai_image_vision",
            rawResponse: textResponse.substring(0, 200),
            provenance: provenance,
          },
        },
        processedAt: new Date(),
      };
    } catch (error) {
      throw new Error(
        `Failed to process image with Gemini: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  private buildImageExtractionPrompt(): string {
    return `
Look at this invoice/receipt image carefully and extract the visible information.

STRICT RULES:
- Extract ONLY data clearly visible in the image
- If you cannot read a field clearly, leave it empty ("")
- Never use placeholder or generic data
- Be precise with numbers and amounts

EUROPEAN VAT/NIF FORMAT:
- Portugal: PT123456789 (PT + 9 digits)
- Spain: ES12345678A (ES + 8 digits + letter)
- Italy: IT12345678901 (IT + 11 digits)
- France: FR12345678901 (FR + 11 digits)
- Germany: DE123456789 (DE + 9 digits)

EXPENSE CATEGORIES:
- combustivel: Fuel, gas stations
- refeicoes: Restaurants, food
- deslocacoes: Transport, travel
- material: Office supplies
- servicos: Professional services
- outras_despesas: Other expenses

Look for these fields:
1. Company name (usually at top)
2. Tax ID/NIF/VAT number
3. Invoice date 
4. Net amount (without VAT)
5. VAT amount
6. Total amount (with VAT)
7. VAT rate (as decimal: 0.23 = 23%)
8. Invoice number
9. Category based on business type
10. Brief description of items/services

Return ONLY valid JSON without markdown:
{
  "vendor": "exact company name from image",
  "nif": "tax ID with country prefix if visible",
  "invoiceNumber": "invoice number if visible",
  "issueDate": "YYYY-MM-DD if visible",
  "total": 0.00,
  "netAmount": 0.00,
  "vatAmount": 0.00,
  "vatRate": 0.23,
  "category": "appropriate category",
  "description": "brief description",
  "confidence": 0.8,
  "extractionIssues": []
}`;
  }

  private buildProvenance(
    data: any,
    method: string,
    baseConfidence: number
  ): { [field: string]: any } {
    const provenance: { [field: string]: any } = {};
    const timestamp = new Date();

    for (const [field, value] of Object.entries(data)) {
      provenance[field] = {
        model: "gemini-1.5-pro",
        confidence: value ? baseConfidence : 0.3,
        method: method,
        timestamp: timestamp,
        rawValue: String(value || ''),
        processingTime: 0, // Will be calculated by the calling function
        modelVersion: "2.5-flash",
        extractionContext: {
          pageNumber: 1,
          ocrConfidence: method.includes('vision') ? 0.85 : 0.9,
          boundingBox: method.includes('vision') ? {
            x: 0,
            y: 0,
            width: 100,
            height: 100
          } : null
        }
      };
    }

    return provenance;
  }
}
